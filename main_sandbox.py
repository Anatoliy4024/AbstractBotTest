import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levellevel)s - %(message)s',
    level=logging.DEBUG
)

# –í–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = '7365546887:AAFimfH_lZxsv-v2RyaSktBRk7ww_s5Vs0U'


def generate_calendar_buttons(selected_day=None, disable=False):
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    buttons = [[InlineKeyboardButton(day, callback_data=f"weekday_{day}")] for day in weekdays]

    day = 1
    for col in range(5):  # 5 —Å—Ç–æ–ª–±—Ü–æ–≤
        for row in range(7):  # 7 —Å—Ç—Ä–æ–∫ (–ü–Ω - –í—Å)
            if day <= 31:
                if str(day) == selected_day:
                    buttons[row].append(InlineKeyboardButton(f"üî¥ {day}", callback_data=f"day_{day}"))
                else:
                    text = f"üü¢ {day}" if not disable else f"{day}"
                    callback_data = f"day_{day}" if not disable else 'none'
                    buttons[row].append(InlineKeyboardButton(text, callback_data=callback_data))
                day += 1
            else:
                buttons[row].append(InlineKeyboardButton(" ", callback_data="empty"))

    return buttons


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = generate_calendar_buttons()
    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    context.user_data['last_message_id'] = message.message_id


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data

    if query.data.startswith('day_'):
        selected_day = query.data.split('_')[1]
        user_data['selected_day'] = selected_day

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∫—Ä–∞—Å–Ω—ã–º
        buttons = generate_calendar_buttons(selected_day=selected_day, disable=True)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_day}. –ü—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=yes_no_keyboard(disable=False)
        )

    elif query.data == 'yes':
        # –ë–ª–æ–∫–∏—Ä—É–µ–º "–î–∞" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
        await query.message.edit_reply_markup(reply_markup=yes_no_keyboard(disable=True))

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        await query.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ, —Ç–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ /start."
        )

    elif query.data == 'no':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–µ–ª–µ–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        buttons = generate_calendar_buttons()
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))


def yes_no_keyboard(disable=False):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–î–∞", callback_data='yes' if not disable else 'none'),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='no' if not disable else 'none')
        ]
    ])


def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    application.run_polling()


if __name__ == "__main__":
    main()
