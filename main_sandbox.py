import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes
import calendar
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)

# –í–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = '7365546887:AAFimfH_lZxsv-v2RyaSktBRk7ww_s5Vs0U'


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def generate_calendar_buttons(year, month, selected_day=None, disable=False):
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    first_weekday, num_days = calendar.monthrange(year, month)
    today = datetime.now()

    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    buttons = [[InlineKeyboardButton(day, callback_data="none")] for day in weekdays]

    day = 1
    for col in range(5):
        for row in range(7):
            if col == 0 and row < first_weekday:  # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
                buttons[row].append(InlineKeyboardButton(" ", callback_data="none"))
            elif day <= num_days:
                if (year < today.year or
                   (year == today.year and month < today.month) or
                   (year == today.year and month == today.month and day < today.day)):
                    buttons[row].append(InlineKeyboardButton(f"üî¥ {day}", callback_data="none"))
                elif str(day) == selected_day:
                    buttons[row].append(InlineKeyboardButton(f"üî¥ {day}", callback_data=f"day_{day}"))
                else:
                    text = f"üü¢ {day}" if not disable else f"{day}"
                    callback_data = f"day_{day}" if not disable else 'none'
                    buttons[row].append(InlineKeyboardButton(text, callback_data=callback_data))
                day += 1
            else:  # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
                buttons[row].append(InlineKeyboardButton(" ", callback_data="none"))

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
    while len(buttons[-1]) < 6:
        buttons[-1].append(InlineKeyboardButton(" ", callback_data="none"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    buttons.append([
        InlineKeyboardButton("<", callback_data="prev_month"),
        InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="none"),
        InlineKeyboardButton(">", callback_data="next_month")
    ])

    return buttons


# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    year, month = now.year, now.month
    context.user_data['year'] = year
    context.user_data['month'] = month

    buttons = generate_calendar_buttons(year, month)
    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    context.user_data['last_message_id'] = message.message_id


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data

    year = user_data.get('year')
    month = user_data.get('month')

    if query.data.startswith('day_'):
        selected_day = query.data.split('_')[1]
        user_data['selected_day'] = selected_day

        buttons = generate_calendar_buttons(year, month, selected_day=selected_day, disable=True)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))

        await query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {year}-{month:02d}-{selected_day}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=yes_no_keyboard(disable=False)
        )

    elif query.data == 'yes':
        await query.message.edit_reply_markup(reply_markup=yes_no_keyboard(disable=True))
        await query.message.reply_text("–°–ø–∞—Å–∏–±–æ, —Ç–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ /start.")

    elif query.data == 'no':
        buttons = generate_calendar_buttons(year, month)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data == 'prev_month':
        month -= 1
        if month < 1:
            month = 12
            year -= 1
        user_data['year'] = year
        user_data['month'] = month
        buttons = generate_calendar_buttons(year, month)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data == 'next_month':
        month += 1
        if month > 12:
            month = 1
            year += 1
        user_data['year'] = year
        user_data['month'] = month
        buttons = generate_calendar_buttons(year, month)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def yes_no_keyboard(disable=False):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–î–∞", callback_data='yes' if not disable else 'none'),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='no' if not disable else 'none')
        ]
    ])


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    application.run_polling()


if __name__ == "__main__":
    main()
